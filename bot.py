"""
This file is a part of AnimeGo Monitoring Bot.

AnimeGo Monitoring Bot is a Telegram bot supposed to check the release of new episodes at <https://animego.org/>
Copyright (C) 2021 Nerovik

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""

import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import requests
import threading
from time import sleep
import agparser as parser
from datetime import datetime

from database import Database
db = Database("tracking.db") # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

bot = telebot.TeleBot("<API-–∫–ª—é—á>", "HTML") # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—é–¥–∞ —Å–≤–æ–π API-–∫–ª—é—á

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–∞–∫–æ–µ-—Ç–æ –∫–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã—à–ª–∞ –ª–∏ –Ω–æ–≤–∞—è —Å–µ—Ä–∏—è
def checker_test():
    while True:
        time = datetime.now()
        timestamp = f'[{time.day}-{time.month}-{time.year} {time.hour}:{time.minute}:{time.second}]'

        for tuple in db.getIds(): # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Ä—Ç–µ–∂–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –ë–î
            for id in tuple: # –ò–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏
                userId = db.getUserId(id)
                link = db.getTracking(id)

                thumbnail = parser.getThumbnail(link)
                episodes = parser.getEpisodes(link) # –ü–æ–ª—É—á–∞–µ–º —Å —Ä–µ—Å—É—Ä—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –Ω–∞ —Ç–∞–π—Ç–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                title = parser.getTitle(link) 
                status = parser.getStatus(link)
                studio = parser.getStudio(link)

                if (episodes != db.getEpisodes(id)): # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ –±–∞–∑–µ –∏ –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.send_photo(userId, requests.get(thumbnail).content, f'<b>{title}</b> \n'
                    '========================\n'
                    f'–≠–ø–∏–∑–æ–¥–æ–≤: {episodes}\n'
                    f'–°—Ç–∞—Ç—É—Å: {status}\n'
                    f'–°—Ç—É–¥–∏—è: {studio}\n'
                    '========================\n'
                    '<b>‚úÖ –í—ã—à–µ–ª –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥ —ç—Ç–æ–≥–æ –∞–Ω–∏–º–µ!</b>\n'
                    f'<b>–ë–µ–≥–æ–º —Å–º–æ—Ç—Ä–µ—Ç—å: </b><a href="{db.getTracking(id)}">*—Ç—ã–∫*</a>')

                    db.setEpisodes(id, episodes)
                    print(f'{timestamp} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
                else:
                    print(f'{timestamp} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π –Ω–µ—Ç')
        sleep(120) # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª—é–±–æ–µ –≤—Ä–µ–º—è, –≤ –º–æ—ë–º —Å–ª—É—á–∞–µ - —ç—Ç–æ –æ–¥–Ω–∞ –º–∏–Ω—É—Ç–∞


# –î–µ–ª–∞–µ–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–æ–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
t1 = threading.Thread(target=checker_test) 
lock = threading.RLock()
t1.start()


# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∏ –¥–∞ –º–µ–Ω—è –Ω–µ –∫–æ–ª—ã—à–µ—Ç, —á—Ç–æ —ç—Ç–æ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
@bot.message_handler(content_types=['text'])
def start(message):
    if message.text == "/start":
        userExists(message.from_user.id)

        bot.send_message(message.from_user.id, "üëã –ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –Ω–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ —Ä–∞–∑–Ω—ã—Ö –∞–Ω–∏–º–µ\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –≤—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ!\n\n"
        "‚úâÔ∏è –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏—Ü–µ–π: <a href='https://notabug.org/ICQ/information/src/master/contacting_ru.txt'>*—Ç—ã–∫*</a>\n\n"
        "üí∞ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: <a href='https://notabug.org/ICQ/information/src/master/donations_ru.txt'>*—Ç—ã–∫*</a>\n\n"
        "‚öôÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞: <a href='https://notabug.org/ICQ/animego-monitoring_bot'>*—Ç—ã–∫*</a>")
    if message.text == "/help":
        bot.send_message(message.from_user.id, "/help - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/tracking - –≤—ã–≤–µ—Å—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π—Ç–ª\n"
        "/track - –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–π—Ç–ª –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–µ")
    if message.text == "/tracking":
        userExists(message.from_user.id)

        if db.getTracking(db.getId(message.from_user.id)) == None:
            bot.send_message(message.from_user.id, "‚õîÔ∏è –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!")
        else:
            link = db.getTracking(db.getId(message.from_user.id))
            episodes = db.getEpisodes(db.getId(message.from_user.id))

            title = parser.getTitle(link) 
            status = parser.getStatus(link)
            studio = parser.getStudio(link)

            bot.send_photo(message.from_user.id, requests.get(parser.getThumbnail(db.getTracking(db.getId(message.from_user.id)))).content, f'<b>{title}</b> \n'
            '========================\n'
            f'–≠–ø–∏–∑–æ–¥–æ–≤: {episodes}\n'
            f'–°—Ç–∞—Ç—É—Å: {status}\n'
            f'–°—Ç—É–¥–∏—è: {studio}\n'
            '========================\n'
            '<b>üî• –í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —ç—Ç–æ –∞–Ω–∏–º–µ!</b>') 
    if message.text == "/track":
        userExists(message.from_user.id)

        bot.send_message(message.from_user.id, "üîç –ö–∞–∫–æ–µ –∞–Ω–∏–º–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?")
        bot.register_next_step_handler(message, monitor) # –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–¥–∞—á—É –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç–∞–π—Ç–ª–∞ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    if message.text == "/stoptracking":
        userExists(message.from_user.id)

        if db.getTracking(db.getId(message.from_user.id)) == None:
            bot.send_message(message.from_user.id, "‚õîÔ∏è –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!")
        else:
            # –°—Ç–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            db.setTracking(db.getId(message.from_user.id), None) 
            db.setEpisodes(db.getId(message.from_user.id), None)
            bot.send_message(message.from_user.id, "üö´ –í—ã –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ!")

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–π—Ç–ª –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ
def monitor(message):
    if parser.search(message.text) == None:
        bot.send_message(message.from_user.id, "‚ùå –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –∞–Ω–∏–º–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        link = parser.search(message.text) # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–π—Ç–ª
        markup = InlineKeyboardMarkup()
        go_button = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É', url=link) # –°–æ–∑–¥–∞—ë–º —Å–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫—É
        markup.add(go_button)

        # –ü–∞—Ä—Å–∏–º –≤—Å—ë! –û–±–ª–æ–∂–∫—É, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤, —Å—Ç—É–¥–∏—é, —Å—Ç–∞—Ç—É—Å, —Ç–æ–ª—å–∫–æ –∂–∞–Ω—Ä—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª—Å—è
        thumbnail = parser.getThumbnail(link)
        episodes = parser.getEpisodes(link) # –ü–æ–ª—É—á–∞–µ–º —Å —Ä–µ—Å—É—Ä—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤ –Ω–∞ —Ç–∞–π—Ç–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        title = parser.getTitle(link) 
        status = parser.getStatus(link)
        studio = parser.getStudio(link)

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —É–∂–µ –≤—ã—à–µ–¥—à–µ–µ –∏–ª–∏ –µ—â—ë —Ç–æ–ª—å–∫–æ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞–Ω–∏–º–µ
        if parser.getStatus(link) == '–û–Ω–≥–æ–∏–Ω–≥' or parser.getStatus(link) == '–ê–Ω–æ–Ω—Å':
            bot.send_photo(message.from_user.id, requests.get(thumbnail).content, f'<b>{title}</b> \n'
            '========================\n'
            f'–≠–ø–∏–∑–æ–¥–æ–≤: {episodes}\n'
            f'–°—Ç–∞—Ç—É—Å: {status}\n'
            f'–°—Ç—É–¥–∏—è: {studio}\n'
            '========================\n'
            '<b>üîî –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —ç—Ç–æ –∞–Ω–∏–º–µ!</b>', reply_markup=markup)
            db.setTracking(db.getId(message.from_user.id), link) # –í—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.setEpisodes(db.getId(message.from_user.id), parser.getEpisodes(db.getTracking(db.getId(message.from_user.id)))) # –¢—É–¥–∞ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏–∑–æ–¥–æ–≤
        else:
            bot.send_photo(message.from_user.id, requests.get(thumbnail).content, f'<b>{title}</b> \n'
            '========================\n'
            f'–≠–ø–∏–∑–æ–¥–æ–≤: {episodes}\n'
            f'–°—Ç–∞—Ç—É—Å: {status}\n'
            f'–°—Ç—É–¥–∏—è: {studio}\n'
            '========================\n'
            '<b>‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —ç—Ç–æ –∞–Ω–∏–º–µ!</b>', reply_markup=markup)

def userExists(userId):
    lock.acquire(False) # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫ –Ω–∞—à–µ–≥–æ –ø–æ—Ç–æ–∫–∞, —á—Ç–æ–±—ã sqlite3 –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î
    try:
        if(not db.userExists(userId)): # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            db.addUser(userId)
    finally:
        lock.release() # –û—Ç–ø—É—Å–∫–∞–µ–º –ª–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–≥–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–ª—å—à–µ


bot.polling(none_stop=True, interval=0)


